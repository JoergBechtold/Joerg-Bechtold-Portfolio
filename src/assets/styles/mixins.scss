@use "../styles/variables.scss" as *;

@mixin dFlexAllCenter($ai: center, $jc: center, $g: 0) {
  display: flex;
  align-items: $ai;
  justify-content: $jc;
  gap: $g;
}

@mixin headerLinkLogoStyle() {
  width: 105px;
  height: auto;
  display: grid;
  place-items: center;

  > a {
    height: 100%;
    width: 100%;

    > img {
      width: 100%;
      height: 100%;

      &:hover {
        cursor: pointer;
      }
    }
  }

  @media screen and (max-width: $breakpoint-width-920) {
    width: 80px;
  }
}

@mixin paddingLeftRightHolePage() {
  padding-inline: $padding-inline-25-100;
}

@mixin fontSizeWeightColor($si: 23px, $we: 400, $co: white) {
  font-size: $si;
  font-weight: $we;
  color: $co;
}

@mixin aboutMeAnimation($slideDirection: "", $transformStart: "") {
  opacity: 0;
  transform: $transformStart;
  animation: $slideDirection var(--animation-time-about-me) ease-out forwards;
  animation-delay: var(--animation-delay-about-me);
}

@mixin applySlideAnimation($animationStartTransform) {
  opacity: 0; // Initial unsichtbar

  // Setze eine CSS-Variable auf dem Element für die Start-Transformation
  // Wichtig: #{$animationStartTransform} für Interpolation der Funktion
  --animation-start-transform: #{$animationStartTransform};

  // Nutze die Animation, die global definiert wird (siehe unten)
  animation: slideIn var(--animation-time-skills) ease-out forwards;

  // Die animation-delay kommt entweder von Angular (skill-item) oder von einer globalen Variable
  animation-delay: var(--animation-delay, var(--animation-delay-about-me, 0s));
  // Der erste Fallback ist für Angular-spezifisches Delay, der zweite für einen generellen Fallback
}

// @mixin skillItemAnimation($startTransform) {
//   opacity: 0;
//   transform: $startTransform; // Startposition für die Animation
//   animation: slideInDiagonal var(--animation-time-about-me) ease-out forwards; // animation: Name Dauer Timing Function Füllmodus
//   animation-delay: var(--animation-delay);
// }

// @mixin skillRightContentAnimation($startTransform) {
//   opacity: 0;
//   transform: $startTransform; // Startposition für die Animation
//   animation: slideInDiagonal var(--animation-time-about-me) ease-out forwards; // animation: Name Dauer Timing Function Füllmodus
//   animation-delay: var(--animation-delay-about-me);
// }

// @mixin slideInDiagonal($startTransform) {
//   @keyframes slideInDiagonal {
//     0% {
//       opacity: 0;
//       transform: $startTransform;
//     }
//     20% {
//       opacity: 0.1;
//     }

//     40% {
//       opacity: 0.2;
//     }

//     60% {
//       opacity: 0.3;
//     }

//     100% {
//       opacity: 1;
//       transform: translate(0, 0);
//     }
//   }
// }

@mixin commonSectionStyles() {
  height: calc(100dvh - var(--header-height));
  width: 100%;
  background-color: var(--primary-bg-gray);
  @include dFlexAllCenter();

  @media screen and (max-width: $breakpoint-width-920) {
    padding-block: 50px;
    height: unset;
    padding-top: var(--header-height-responsive);
  }

  @media screen and (max-height: $responsive-height-814) {
    height: calc(100dvh - var(--header-height-responsive));
  }

  @media screen and (max-height: $responsive-height-814) and (max-width: $breakpoint-width-920) {
    height: unset;
  }
}

@mixin commonContentStyle() {
  max-width: $max-width-1920;
  width: 100%;
  height: 100%;
  position: relative;
  overflow-x: clip;
  @include dFlexAllCenter($jc: space-between);
}

@mixin primaryButton($tra-ori-x, $tra-ori-y) {
  border-radius: 10px;
  padding: $padding-block-11-15 $padding-inline-24-30 $padding-block-11-15
    $padding-inline-24-30;
  background-color: $primary-bg-green;
  @include fontSizeWeightColor($si: clamp(18px, 17px + 0.3125vw, 23px));
  transition: all 0.3s ease-in-out;
  transform-origin: $tra-ori-x $tra-ori-y;
  box-shadow: 4px 4px 4px 0px #00000040;

  &:hover {
    background-color: $primary-bg-purple;
    transform: scale(1.1);
  }
}
